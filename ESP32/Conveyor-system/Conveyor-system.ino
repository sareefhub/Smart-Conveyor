#include <WiFi.h>
#include <PubSubClient.h>
#include <ESP32Servo.h>

// üîπ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ WiFi ‡πÅ‡∏•‡∏∞ MQTT
const char* ssid = "Yindee";  
const char* password = "phoorin3799";  
const char* mqtt_server = "172.20.10.3";  // IP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô MQTT Broker
const int mqtt_port = 1883;
const char* mqtt_topic = "esp32/IR";  // MQTT Topic

WiFiClient espClient;
PubSubClient client(espClient);

#define IN1 18         // ‡∏Ç‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå
#define IN2 19         // ‡∏Ç‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå
#define IR_SENSOR 5    // ‡∏Ç‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ IR Sensor
#define SERVO_PIN 13   // ‡∏Ç‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÇ‡∏ß

Servo myServo; // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÇ‡∏ß

void setup() {
    Serial.begin(115200);
    
    pinMode(IN1, OUTPUT);
    pinMode(IN2, OUTPUT);
    pinMode(IR_SENSOR, INPUT);
    
    myServo.attach(SERVO_PIN); // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÇ‡∏ß
    myServo.write(0);  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÇ‡∏ß‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà 0 ‡∏≠‡∏á‡∏®‡∏≤

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);

    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting to WiFi...");
    }
    Serial.println("WiFi connected");

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MQTT
    client.setServer(mqtt_server, mqtt_port);
    client.setCallback(mqttCallback);
}

void loop() {
    if (!client.connected()) {
        reconnect();
    }
    client.loop();
    
    int irValue = digitalRead(IR_SENSOR); // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå IR

    if (irValue == LOW) { 
        // ‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏ (IR ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ LOW)
        digitalWrite(IN1, LOW); // ‡∏´‡∏¢‡∏∏‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå
        digitalWrite(IN2, LOW);
        Serial.println("Object detected! Moving servo...");
        
        myServo.write(180); // ‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÇ‡∏ß‡πÑ‡∏õ‡∏ó‡∏µ‡πà 180 ‡∏≠‡∏á‡∏®‡∏≤
        delay(1000); // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÇ‡∏ß‡∏ó‡∏≥‡∏á‡∏≤‡∏ô

        myServo.write(0); // ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        delay(500); // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÇ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô MQTT
        client.publish(mqtt_topic, "Object detected!");
        Serial.println("Object detected!");

        delay(2000); 

        // ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≠
        Serial.println("Resuming motor...");
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2, LOW);

        // ‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡πå 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏´‡πâ IR Sensor ‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏´‡∏°‡πà
        Serial.println("Waiting 5 seconds before scanning again...");
        delay(5000); 
    
    } 
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT
void reconnect() {
    while (!client.connected()) {
        Serial.print("Attempting MQTT connection...");
        if (client.connect("ESP32Client")) {
            Serial.println("connected");
            client.subscribe(mqtt_topic);
        } else {
            Serial.print("failed, rc=");
            Serial.print(client.state());
            Serial.println(" try again in 5 seconds");
            delay(5000);
        }
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MQTT
void mqttCallback(char* topic, byte* payload, unsigned int length) {
    Serial.print("Message arrived [");
    Serial.print(topic);
    Serial.print("] ");
    for (int i = 0; i < length; i++) {
        Serial.print((char)payload[i]);
    }
    Serial.println();
}
